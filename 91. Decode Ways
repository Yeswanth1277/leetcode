class Solution {
public:
    int numDecodings(string s) {
         std::map<char, int> nums{
            {'A', 1}, {'B', 2}, {'C', 3}, {'D', 4}, {'E', 5}, {'F', 6},
            {'G', 7}, {'H', 8}, {'I', 9}, {'J', 10}, {'K', 11}, {'L', 12},
            {'M', 13}, {'N', 14}, {'O', 15}, {'P', 16}, {'Q', 17}, {'R', 18},
            {'S', 19}, {'T', 20}, {'U', 21}, {'V', 22}, {'W', 23}, {'X', 24},
            {'Y', 25}, {'Z', 26}
        };

        int n = s.size();
        if (n == 0) return 0;

        // dp[i] represents the number of ways to decode the substring s[0...i]
        std::vector<int> dp(n + 1, 0);
        dp[0] = 1; // Empty string is considered a valid decoding

        for (int i = 1; i <= n; ++i) {
            // Decode single digit
            if (s[i - 1] != '0') {
                dp[i] += dp[i - 1];
            }

            // Decode two digits
            if (i > 1) {
                int twoDigits = stoi(s.substr(i - 2, 2));
                if (twoDigits >= 10 && twoDigits <= 26) {
                    dp[i] += dp[i - 2];
                }
            }
        }

        return dp[n];
    }
};
